#include "FastLED.h"

#define LED_PIN 2
#define BUTTON_PIN 3
#define WHITE_BUTTON_PIN 4
#define RED_BUTTON_PIN 5
#define NUM_LEDS 30
#define BRIGHTNESS 255
#define LED_TYPE WS2811
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];


int buttonState = 0; 

void setup() {
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
  pinMode(BUTTON_PIN, INPUT);
  pinMode(WHITE_BUTTON_PIN, INPUT);
  pinMode(RED_BUTTON_PIN, INPUT);
}

void lightshow() {
  // Pulse Red
  for(int i = 0; i < 4; i++) {
    for(int j = 0; j <= NUM_LEDS; j++) {
      leds[j] = CRGB::Red;
    }
    FastLED.show();
    delay(500);
    for(int j = 0; j <= NUM_LEDS; j++) {
      leds[j] = CRGB::Black;
    }
    FastLED.show();
    delay(500);
    delay(1000);

    // Check if the white button is pressed to interrupt and turn on the lights in white
    if (digitalRead(WHITE_BUTTON_PIN) == HIGH) {
      for(int j = 0; j <= NUM_LEDS; j++) {
        leds[j] = CRGB::White;
      }
      FastLED.show();
      delay(1000);
      return;
    }

    // Check if the red button is pressed to interrupt and turn on the lights in red
    if (digitalRead(RED_BUTTON_PIN) == HIGH) {
      for(int j = 0; j <= NUM_LEDS; j++) {
        leds[j] = CRGB::Red;
      }
      FastLED.show();
      delay(1000);
      return;
    }
  }

  // Pulse Green
  for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::Green;
  }
  FastLED.show();
  delay(1500);
  for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::Black;
  }
  FastLED.show();

  // Solid White
  for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::White;
  }
  FastLED.show();
  delay(30000);

  // Flash Red
  for(int i = 0; i < 3; i++) {
    for(int j = 0; j <= NUM_LEDS; j++) {
      leds[j] = CRGB::Red;
    }
    FastLED.show();
    delay(100);
    for(int j = 0; j <= NUM_LEDS; j++) {
      leds[j] = CRGB::Black;
    }
    FastLED.show();
    delay(100);

    // Check if the white button is pressed to interrupt and turn on the lights in white
    if (digitalRead(WHITE_BUTTON_PIN) == HIGH) {
      for(int j = 0; j <= NUM_LEDS; j++) {
        leds[j] = CRGB::White;
      }
      FastLED.show();
      delay(1000);
      return;
    }

    // Check if the red button is pressed to interrupt and turn on the lights in red
    if (digitalRead(RED_BUTTON_PIN) ==HIGH) {
    for(int j = 0; j <= NUM_LEDS; j++) {
        leds[j] = CRGB::Red;
        }
        FastLED.show();
        delay(1000);
        return;
        }
        }

    // Solid White
    for(int j = 0; j <= NUM_LEDS; j++) {
        leds[j] = CRGB::White;
        }
        FastLED.show();
        delay(140000);

    for(int i = 0; i < 4; i++) {
    for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::Red;
    }
    FastLED.show();
    delay(500);
    for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::Black;
    }
    FastLED.show();
    delay(500);
    delay(1000);
// Check if the white button is pressed to interrupt and turn on the lights in white
if (digitalRead(WHITE_BUTTON_PIN) == HIGH) {
  for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::White;
  }
  FastLED.show();
  delay(1000);
  return;
}

// Check if the red button is pressed to interrupt and turn on the lights in red
if (digitalRead(RED_BUTTON_PIN) == HIGH) {
  for(int j = 0; j <= NUM_LEDS; j++) {
    leds[j] = CRGB::Red;
  }
  FastLED.show();
  delay(1000);
  return;
}


// Solid RED
for(int j = 0; j <= NUM_LEDS; j++) {
leds[j] = CRGB::Red;
}
FastLED.show();
delay(15000);
for(int j = 0; j <= NUM_LEDS; j++) {
leds[j] = CRGB::Black;
}
FastLED.show();
}

void loop() {
buttonState = digitalRead(BUTTON_PIN);
if (buttonState == HIGH) {
lightshow();
}
}
